type Greeting @entity {
  id: ID!
  sender: Sender!
  greeting: String!
  premium: Boolean
  value: BigInt
  createdAt: BigInt!
  transactionHash: String!
}

type Sender @entity {
  id: ID!
  address: Bytes!
  greetings: [Greeting!] @derivedFrom(field: "sender")
  createdAt: BigInt!
  greetingCount: BigInt!
}

type Campaign @entity {
  id: ID!
  campaignId: BigInt! # uint32
  owner: Bytes! # address
  title: String! # string
  claim: String! # string
  description: String! # string
  amountCollected: BigInt! # uint256
  amountWithdrawn: BigInt! # uint256
  createdAt: BigInt!
  donations: [Donation]! @derivedFrom(field: "campaign")
  withdrawals: [Withdrawal]! @derivedFrom(field: "campaign")
  follows: [Follow]! @derivedFrom(field: "campaign")
}

type Donation @entity(immutable: true) {
  id: ID!
  campaign: Campaign! # uint32
  donor: Donor! # address
  comment: String!
  amount: BigInt! # uint256
  createdAt: BigInt!
}

type Donor @entity {
    id: ID!
    donations: [Donation!]! @derivedFrom(field: "donor")
    createdAt: BigInt!
    donationCount: BigInt!
}

type Withdrawal @entity(immutable: true) {
  id: ID!
  campaign: Campaign! # uint32
  withdrawer: Withdrawer! # address
  amount: BigInt! # uint256
  comment: String!
  createdAt: BigInt!
}

type Withdrawer @entity {
    id: ID!
    donations: [Withdrawal!]! @derivedFrom(field: "withdrawer")
    createdAt: BigInt!
    withdrawalCount: BigInt!
}

type Follow @entity {
  id: ID!
  campaign: Campaign! # uint32
  user: Bytes! # address
  createdAt: BigInt!
}
